/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redsocialgrafos;

import edu.uci.ics.jung.graph.DirectedGraph;
import edu.uci.ics.jung.graph.DirectedSparseMultigraph;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Inspiron
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        System.out.println("leer Archivo");
        leerPersonas();
        leerRelaciones();
        comboBoxPersona1AR.removeAllItems();
        comboBoxPersona2AR.removeAllItems();
        comboBoxPersona1MM.removeAllItems();
        comboBoxPersona2MM.removeAllItems();
        for (int i = 0; i < nombres.size(); i++) {
            comboBoxPersona1AR.addItem(nombres.get(i));
            comboBoxPersona2AR.addItem(nombres.get(i));
            comboBoxPersona1MM.addItem(nombres.get(i));
            comboBoxPersona2MM.addItem(nombres.get(i));
        }
        grafo = new TDAGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        agregar = new javax.swing.JInternalFrame();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        agregarPersonas = new javax.swing.JButton();
        nombreAgregarPersonas = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        comboBoxPersona1AR = new javax.swing.JComboBox();
        comboBoxPersona2AR = new javax.swing.JComboBox();
        relacionAR = new javax.swing.JSpinner();
        agregarRelacion = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        mandarMensaje = new javax.swing.JInternalFrame();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxPersona1MM = new javax.swing.JComboBox();
        comboBoxPersona2MM = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMM = new javax.swing.JTable();
        enviarMM = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        desktop = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ventanaAgregar = new javax.swing.JMenuItem();
        ventanaMensaje = new javax.swing.JMenuItem();
        ventanaGrafo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        agregar.setVisible(true);

        jLabel2.setText("Nombre:");

        agregarPersonas.setText("Agregar Persona");
        agregarPersonas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPersonasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agregarPersonas)
                    .addComponent(nombreAgregarPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombreAgregarPersonas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(agregarPersonas)
                .addGap(50, 50, 50))
        );

        jTabbedPane1.addTab("Agregar Personas", jPanel1);

        relacionAR.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        agregarRelacion.setText("Agregar Relacion");
        agregarRelacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarRelacionActionPerformed(evt);
            }
        });

        jLabel3.setText("Persona 1");

        jLabel4.setText("Relacion:");

        jLabel5.setText("Persona 2");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(comboBoxPersona1AR, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(relacionAR, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(agregarRelacion))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(132, 132, 132)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(comboBoxPersona2AR, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxPersona1AR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxPersona2AR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relacionAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(agregarRelacion)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Agregar Relacion", jPanel2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Agregar Personas Y Relaciones");

        javax.swing.GroupLayout agregarLayout = new javax.swing.GroupLayout(agregar.getContentPane());
        agregar.getContentPane().setLayout(agregarLayout);
        agregarLayout.setHorizontalGroup(
            agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agregarLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agregarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(100, 100, 100))
        );
        agregarLayout.setVerticalGroup(
            agregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agregarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mandarMensaje.setVisible(true);

        jLabel6.setText("De:");

        jLabel7.setText("Para:");

        tablaMM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Persona 1", "Persona 2", "Relacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaMM);

        enviarMM.setText("Enviar");
        enviarMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarMMActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("MENSAJE");

        javax.swing.GroupLayout mandarMensajeLayout = new javax.swing.GroupLayout(mandarMensaje.getContentPane());
        mandarMensaje.getContentPane().setLayout(mandarMensajeLayout);
        mandarMensajeLayout.setHorizontalGroup(
            mandarMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mandarMensajeLayout.createSequentialGroup()
                .addGroup(mandarMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mandarMensajeLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(mandarMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxPersona1MM, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(72, 72, 72)
                        .addGroup(mandarMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(mandarMensajeLayout.createSequentialGroup()
                                .addComponent(comboBoxPersona2MM, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(enviarMM))))
                    .addGroup(mandarMensajeLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mandarMensajeLayout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel8)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        mandarMensajeLayout.setVerticalGroup(
            mandarMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mandarMensajeLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mandarMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mandarMensajeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxPersona1MM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxPersona2MM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enviarMM))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        ventanaAgregar.setText("Agregar");
        ventanaAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ventanaAgregarActionPerformed(evt);
            }
        });
        jMenu1.add(ventanaAgregar);

        ventanaMensaje.setText("Mandar Mensaje");
        ventanaMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ventanaMensajeActionPerformed(evt);
            }
        });
        jMenu1.add(ventanaMensaje);

        ventanaGrafo.setText("Ver Grafo");
        ventanaGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ventanaGrafoActionPerformed(evt);
            }
        });
        jMenu1.add(ventanaGrafo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarPersonasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPersonasActionPerformed
        // TODO add your handling code here:
        System.out.println("**********Agregar Persona**********");
        String nombre = nombreAgregarPersonas.getText();
        System.out.println("leer Archivo");
        leerPersonas();
        System.out.println("comparar");
        boolean igual = false;
        for (int i = 0; i < nombres.size(); i++) {
            if (nombre.equals(nombres.get(i))) {
                igual = true;
            }
        }
        if (igual == true) {
            JOptionPane.showMessageDialog(this, "La persona ya existe");
        } else {
            System.out.println("agregar a lista");
            nombres.add(nombre);
            System.out.println("guardar");
            guardarPersonas(nombre);
        }

        nombreAgregarPersonas.setText("");

        comboBoxPersona1AR.removeAllItems();
        comboBoxPersona2AR.removeAllItems();
        comboBoxPersona1MM.removeAllItems();
        comboBoxPersona2MM.removeAllItems();
        for (int i = 0; i < nombres.size(); i++) {
            comboBoxPersona1AR.addItem(nombres.get(i));
            comboBoxPersona2AR.addItem(nombres.get(i));
            comboBoxPersona1MM.addItem(nombres.get(i));
            comboBoxPersona2MM.addItem(nombres.get(i));
        }

    }//GEN-LAST:event_agregarPersonasActionPerformed

    private void ventanaAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ventanaAgregarActionPerformed
        // TODO add your handling code here:
        agregar.pack();
        desktop.add(agregar);
    }//GEN-LAST:event_ventanaAgregarActionPerformed

    private void agregarRelacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarRelacionActionPerformed
        // TODO add your handling code here:
        System.out.println("**********Agregar Relacion**********");
        String nombre1 = comboBoxPersona1AR.getSelectedItem().toString();
        String nombre2 = comboBoxPersona2AR.getSelectedItem().toString();
        int relacion = (Integer) relacionAR.getValue();

        System.out.println("leer Archivo");
        leerRelaciones();
        System.out.println("comparar");
        boolean bool = false;
        for (int i = 0; i < relaciones.size(); i++) {
            if ((relaciones.get(i).getNombre1().equals(nombre1) && relaciones.get(i).getNombre2().equals(nombre2))
                    || (relaciones.get(i).getNombre1().equals(nombre2) && relaciones.get(i).getNombre2().equals(nombre1))) {
                bool = true;

            }
        }
        if (nombre1.equals(nombre2)) {
            bool = true;
        }
        if (bool == true) {
            JOptionPane.showMessageDialog(this, "La relacion ya existe");
        } else {
            System.out.println("agregar a la lista");
            relacion g = new relacion();
            g.setNombre1(nombre1);
            g.setNombre2(nombre2);
            relaciones.add(g);

            System.out.println("guardar");
            guardarRelacion(nombre1, nombre2, relacion);
            
            relacion h = new relacion();
            h.setNombre1(nombre2);
            h.setNombre2(nombre1);
            relaciones.add(h);

            System.out.println("guardar2");
            guardarRelacion(nombre2, nombre1, relacion);
        }

    }//GEN-LAST:event_agregarRelacionActionPerformed

    private void ventanaMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ventanaMensajeActionPerformed
        // TODO add your handling code here:
        mandarMensaje.pack();
        desktop.add(mandarMensaje);
        mandarMensaje.show();
    }//GEN-LAST:event_ventanaMensajeActionPerformed

    private void enviarMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarMMActionPerformed
        // TODO add your handling code here:
        personas = new LinkedList<String>();
        personas.add(comboBoxPersona1MM.getSelectedItem().toString());
        personas.add(comboBoxPersona2MM.getSelectedItem().toString());
        System.out.println("combobox MM: "+comboBoxPersona1MM.getSelectedItem().toString());
        System.out.println("combobox MM: "+comboBoxPersona2MM.getSelectedItem().toString());
        
        if (!personas.isEmpty()) {
            System.out.println("personas.size:"+personas.size());
            caminos = grafo.calcularCamino(personas);
            DefaultTableModel modelo = (DefaultTableModel) tablaMM.getModel();
            while (modelo.getRowCount() > 0) {
                modelo.removeRow(0);
            }
            String[] arreglo = caminos.get(0).toString().split("-");
            int cont = 0, cont1 = 1, cont2 = 2;
            System.out.println("arreglo.length"+arreglo.length);
            for (int i = 0; i < arreglo.length; i++) {
                System.out.println(arreglo[i]);
            }
            for (int i = 0; i < arreglo.length/3; i++) {
                String persona1 = arreglo[cont];
                System.out.println("persona1:" + persona1);
                String persona2 = arreglo[cont2];
                System.out.println("persona2:" + persona2);
                String relacion = arreglo[cont1];
                System.out.println("relacion:" + relacion);
                Object[] data = {persona1, persona2, relacion};
                modelo.addRow(data);
                cont += 3;
                cont1 += 3;
                cont2 += 3;
            }
        }
        
        Graficar g = new Graficar();
        Vertice origen = getViaje(comboBoxPersona1MM.getSelectedItem().toString());
        Vertice destino = getViaje(comboBoxPersona2MM.getSelectedItem().toString());
        
        g.getShortestPath(Grafo, origen, destino);
        g.ruta();
        
    }//GEN-LAST:event_enviarMMActionPerformed

    private void ventanaGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ventanaGrafoActionPerformed
        // TODO add your handling code here:
        Grafo = new DirectedSparseMultigraph<>();
        try {
            File Archivo = new File(".\\relaciones.ncr");
            Scanner e = new Scanner(Archivo);
            while (e.hasNext()) {
                String[] NewLine = e.nextLine().split("@");
                Vertice r1 = new Vertice(NewLine[0], "Test");
                Vertice r2 = new Vertice(NewLine[1], "Test");

                Vertice vertex1 = checkNode(r1);
                Vertice vertex2 = checkNode(r2);
                
                if(vertex1 == null){
                    Grafo.addVertex(r1);
                    vertex1 = r1;
                }
                if(vertex2 == null){
                    Grafo.addVertex(r2);
                    vertex2 = r2;
                }
                Arista Edge = new Arista(Grafo.getEdgeCount()+1, Integer.parseInt(NewLine[2]));
                
                Grafo.addEdge(Edge, vertex1,vertex2);
            }
        }catch(Exception e){
            
        }
        Graficar g = new Graficar();
        g.paintGraph(Grafo);
    }//GEN-LAST:event_ventanaGrafoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame agregar;
    private javax.swing.JButton agregarPersonas;
    private javax.swing.JButton agregarRelacion;
    private javax.swing.JComboBox comboBoxPersona1AR;
    private javax.swing.JComboBox comboBoxPersona1MM;
    private javax.swing.JComboBox comboBoxPersona2AR;
    private javax.swing.JComboBox comboBoxPersona2MM;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JButton enviarMM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JInternalFrame mandarMensaje;
    private javax.swing.JTextField nombreAgregarPersonas;
    private javax.swing.JSpinner relacionAR;
    private javax.swing.JTable tablaMM;
    private javax.swing.JMenuItem ventanaAgregar;
    private javax.swing.JMenuItem ventanaGrafo;
    private javax.swing.JMenuItem ventanaMensaje;
    // End of variables declaration//GEN-END:variables
    private ArrayList<String> nombres = new ArrayList();
    private ArrayList<relacion> relaciones = new ArrayList();
    private Queue<String> personas;
    private ArrayList caminos = new ArrayList();
    private TDAGraph grafo;
    private DirectedGraph<Vertice, Arista> Grafo;

    private void leerPersonas() {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        nombres = new ArrayList();
        try {
            archivo = new File(".\\personas.ncr");
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            String linea;
            while ((linea = br.readLine()) != null) {
                nombres.add(linea);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    private void guardarPersonas(String persona) {
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter(".\\personas.ncr", true);
            pw = new PrintWriter(fichero);
            pw.println(persona);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    private void guardarRelacion(String persona1, String persona2, int relacion) {
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter(".\\relaciones.ncr", true);
            pw = new PrintWriter(fichero);
            pw.println(persona1 + "@" + persona2 + "@" + relacion);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    private void leerRelaciones() {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        relaciones = new ArrayList();
        try {
            archivo = new File(".\\relaciones.ncr");
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            String linea;
            while ((linea = br.readLine()) != null) {
                String[] arreglo = linea.split("@");
                relacion g = new relacion();
                g.setNombre1(arreglo[0]);
                g.setNombre2(arreglo[1]);
                relaciones.add(g);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    private Vertice checkNode(Vertice R) {
        Vertice[] arrayViaje = Grafo.getVertices().toArray(new Vertice[0]);
        for (int i = 0; i < arrayViaje.length; i++) {
            if (arrayViaje[i].equals(R)) {
                return arrayViaje[i];
            }
        }
        return null;
    }
    private Vertice getViaje(String X) {
        Vertice[] R = Grafo.getVertices().toArray(new Vertice[0]);

        for (int i = 0; i < R.length; i++) {
            if (R[i].getID().equalsIgnoreCase(X)) {
                return R[i];
            }
        }

        return null;
    }
}
